local hook: (any, ...any) -> any;
local Player: Player = game:GetService("Players").LocalPlayer;

local insert:  (<V>({V}, V) -> ()) & (<V>({V}, number, V) -> ()) = table.insert;
local ReplicatedStorage = game:GetService("ReplicatedStorage");

local hook2: (any, ...any) -> any;
local function Bypass(): ()
    local Connections: {{ [any]: Connection }} = {};
    insert(Connections, getconnections(Player.Character.DescendantAdded));

    insert(Connections, getconnections(workspace:GetPropertyChangedSignal("Gravity")));
    insert(Connections, getconnections(ReplicatedStorage["_CS.Events"].ToolEvent.OnClientEvent));

    for Value,Connection in Connections do
        for _,ActualConnection in Connection do
            ActualConnection:Disable();
            ActualConnection = nil;
        end;
    end;
end;

hook2 = hookfunction(getrawmetatable(game).__index, newcclosure(function(Self: Object, Index: string)
    local Property = Index;

    if Property == "JumpPower" then
        return 30    
    elseif Property == "WalkSpeed" then
        return 17;
    elseif Property == "JumpHeight" then
        return 3.612;    
    elseif Property == "PlatformStand" then
        return false;    
    end;
    
    return hook2(Self, Index);
end));

hook = hookfunction(getrawmetatable(game).__namecall, newcclosure(function(Self: any, ...): any
    local Method: string = getnamecallmethod();
    local CallingScript: (LocalScript | ModuleScript)? = getcallingscript();

    if not checkcaller() and Self == Player.Character and Method == "SetPrimaryPartCFrame" then
        return
    end;

    if Method == "FindPartOnRayWithWhitelist" and tostring(CallingScript) == "GunHandlerLocal" then
        return coroutine.yield(coroutine.running());
    end;

    return hook(Self, ...);
end));

Bypass();
Player.CharacterAdded:Connect(Bypass)
